import { Dispatch, SetStateAction, useState } from 'react';
import { GetStaticProps } from 'next';
import Head from 'next/head';
import { DailyData } from '../types';
import mapToDaily from '../utils/mapToDaily';

const Daily = (props: DailyData) => {
  const { lastUpdated, days } = props;

  /**
   * DISPLAY ADDITIONAL DATA
   */

  const [showCampus, toggleCampus] = useState(false);
  const [showSymtomatic, toggleSymtomatic] = useState(false);

  // eslint-disable-next-line no-nested-ternary
  const columnClass = (!showCampus && !showSymtomatic) ? 'w-1/4' : ((showCampus ? !showSymtomatic : showSymtomatic) ? 'w-1/6' : 'w-1/12 last:w-2/12');
  // eslint-disable-next-line no-nested-ternary
  const casesColumnClass = (!showCampus && !showSymtomatic) ? 'w-1/4' : ((showCampus ? !showSymtomatic : showSymtomatic) ? 'w-3/6' : 'w-8/12');
  // eslint-disable-next-line no-nested-ternary
  const casesDataClass = showCampus && showSymtomatic ? 'w-1/5' : (showCampus || showSymtomatic ? 'w-1/3' : 'w-full');

  /**
   * END DISPLAY ADDTIONAL DATA
   */

  /**
   * START FILTER DATA
   */
  const [filterProvided, toggleProvidedFilter] = useState(false);
  const [filterProvidedCount, setFilterProvidedCount] = useState(10);

  const dates = Object.keys(days);

  const [filterDate, toggleFilterDate] = useState(false);
  const [filterStartDate, setFilterStartDate] = useState(dates[dates.length - 1]);
  const [filterEndDate, setFilterEndDate] = useState(dates[0]);

  const startDateOptions = dates.filter((date) => date < filterEndDate).reverse()
    .map((d) => <option key={d} value={d} selected={d === filterEndDate}>{d}</option>);

  const endDateOptions = dates.filter((date) => date > filterStartDate)
    .map((d) => <option key={d} value={d} selected={d === filterEndDate}>{d}</option>).reverse();

  const filteredData = Object.entries(days).filter((d) => {
    const [date, stats] = d;
    if (filterProvided && stats.performedTests <= filterProvidedCount) return false;
    if (filterDate && (date < filterStartDate || date > filterEndDate)) return false;
    return true;
  });
  /**
   * END FILTER DATA
   */

  /**
   * SORT DATA
   */

  // 0: none, 1: descending, 2: ascending
  const [sortDate, setSortDate] = useState(1);
  const [sortPositive, setSortPositive] = useState(0);
  const [sortPerformed, setSortPerformed] = useState(0);
  const [sortPositivity, setSortPositivity] = useState(0);

  function toggleSort(curr: number, setter: Dispatch<SetStateAction<number>>) {
    setSortDate(0);
    setSortPositive(0);
    setSortPerformed(0);
    setSortPositivity(0);

    setter((curr + 1) % 3);
  }

  const sortedData = filteredData.sort((a, b) => {
    const [aDay, aData] = a;
    const [bDay, bData] = b;

    if (sortDate === 1) return aDay < bDay ? 1 : -1;
    if (sortDate === 2) return aDay > bDay ? 1 : -1;

    if (sortPositive === 1) return aData.positiveTests < bData.positiveTests ? 1 : -1;
    if (sortPositive === 2) return aData.positiveTests > bData.positiveTests ? 1 : -1;

    if (sortPerformed === 1) return aData.performedTests < bData.performedTests ? 1 : -1;
    if (sortPerformed === 2) return aData.performedTests > bData.performedTests ? 1 : -1;

    if (sortPositivity === 1) return aData.dailyPositivitity < bData.dailyPositivitity ? 1 : -1;
    if (sortPositivity === 2) return aData.dailyPositivitity > bData.dailyPositivitity ? 1 : -1;
    return -1;
  });

  function sortArrow(curr: number) {
    if (curr === 1) return ' \u25BC';
    if (curr === 2) return ' \u25B2';
    return '';
  }

  /**
   * END SORT DATA
   */

  return (
    <div>
      <Head>
        <title>Daily Data - Poly Plague</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <main className="py-8 space-y-8">
        <div className="sm:px-14 md:px-30 lg:px-40 xl:px-56 space-y-8">
          <section className="px-2 space-y-2">
            <h2 className="bg-green-900 text-xl pl-2 py-2 mb-2">🗄 daily data</h2>
            <p>
              All data is sourced from the
              {' '}
              <a
                href="https://coronavirus.calpoly.edu/dashboard"
                target="_blank"
                rel="noreferrer"
                className="hover:underline font-bold"
              >
                Cal Poly Coronavirus Campus Dashboard&nbsp;🔗
              </a>
              {' '}
              but may not be up-to-date with the data provided by Campus Health and
              Wellbeing. See the Campus Dashboard for the most recent information.
            </p>
            <p>
              If you wish to use this data, you can download it from the Campus Dashboard or use
              the endpoint found at
              {' '}
              {/* eslint-disable-next-line @next/next/no-html-link-for-pages */}
              <a href="/api/daily" className="bg-neutral-700 font-mono px-1 py-0.5 rounded-md text-sm">/api/daily</a>
              .
            </p>

            <p className="text-gray-400 italic">{`data last updated: ${lastUpdated}`}</p>
          </section>

          <div className="xl:flex space-y-8 xl:space-y-0">
            <section className="px-2 space-y-2 xl:w-1/2">
              <h2 className="bg-yellow-900 text-lg pl-2 py-1 mb-2">🔍 filters</h2>
              <div className="space-x-2">
                <input type="checkbox" id="providedFilter" onChange={() => toggleProvidedFilter(!filterProvided)} checked={false || filterProvided} />
                {/* eslint-disable-next-line jsx-a11y/label-has-associated-control */}
                <label htmlFor="providedFilter">
                  tests performed &gt;&nbsp;&nbsp;
                  <input type="number" min={0} className="w-12 text-gray-800" value={filterProvidedCount} onInput={(e) => setFilterProvidedCount(Number(e.currentTarget.value))} />
                </label>
              </div>

              <div className="space-x-2">
                <input type="checkbox" id="dateFilter" onChange={() => toggleFilterDate(!filterDate)} checked={false || filterDate} />
                {/* eslint-disable-next-line jsx-a11y/label-has-associated-control */}
                <label htmlFor="dateFilter">dates:</label>
                <select className="text-gray-800" onChange={(e) => setFilterStartDate(e.target.value)}>{startDateOptions}</select>
                {' -'}
                <select className="text-gray-800" onChange={(e) => setFilterEndDate(e.target.value)}>{endDateOptions}</select>
              </div>
            </section>

            <section className="hidden lg:block px-2 space-y-2 xl:w-1/2">
              <h2 className="bg-yellow-900 text-lg pl-2 py-1 mb-2">🗂 additional data</h2>

              <div>
                <input type="checkbox" id="symptomVisibility" onChange={() => toggleSymtomatic(!showSymtomatic)} checked={false || showSymtomatic} />
                {/* eslint-disable-next-line jsx-a11y/label-has-associated-control */}
                <label htmlFor="symptomVisibility"> by symptoms</label>
              </div>
              <div>
                <input type="checkbox" id="campusVisibility" onChange={() => toggleCampus(!showCampus)} checked={false || showCampus} />
                {/* eslint-disable-next-line jsx-a11y/label-has-associated-control */}
                <label htmlFor="campusVisibility"> by living arrangement</label>
              </div>
            </section>
          </div>

          <section className="px-2 sm:hidden">
            <h2 className="bg-yellow-900 text-lg pl-2 py-1 mb-2">🔐 key</h2>
            <p className="pl-2">📆 - date</p>
            <p className="pl-2">🌡 - positive tests</p>
            <p className="pl-2">🏥 - tests provided</p>
            <p className="pl-2">📈 - daily positivity rate</p>
          </section>
        </div>

        <div className="px-2 sm:px-16 lg:px-8 w-full">
          <div className="flex bg-green-900 py-2 px-2">
            <div
              onClick={() => toggleSort(sortDate, setSortDate)}
              onKeyPress={() => toggleSort(sortDate, setSortDate)}
              role="option"
              aria-selected={sortDate > 0}
              tabIndex={0}
              className={`text-center font-bold cursor-pointer ${columnClass}`}
            >
              <span className="sm:hidden">📆</span>
              <span className="hidden sm:inline-block">📆 date</span>
              {' '}
              {sortArrow(sortDate)}
            </div>
            <div
              onClick={() => toggleSort(sortPositive, setSortPositive)}
              onKeyPress={() => toggleSort(sortDate, setSortDate)}
              role="option"
              aria-selected={sortDate > 0}
              tabIndex={0}
              className={`text-center font-bold cursor-pointer ${casesColumnClass}`}
            >
              <span className="sm:hidden">🌡</span>
              <span className="hidden sm:inline-block">🌡 positive tests</span>
              {' '}
              {sortArrow(sortPositive)}
            </div>
            <div
              onClick={() => toggleSort(sortPerformed, setSortPerformed)}
              onKeyPress={() => toggleSort(sortDate, setSortDate)}
              role="option"
              aria-selected={sortDate > 0}
              tabIndex={0}
              className={`text-center font-bold cursor-pointer ${columnClass}`}
            >
              <span className="sm:hidden">🏥</span>
              <span className="hidden sm:inline-block">🏥 tests performed</span>
              {' '}
              {sortArrow(sortPerformed)}
            </div>
            <div
              onClick={() => toggleSort(sortPositivity, setSortPositivity)}
              onKeyPress={() => toggleSort(sortDate, setSortDate)}
              role="option"
              aria-selected={sortDate > 0}
              tabIndex={0}
              className={`text-center font-bold cursor-pointer ${columnClass}`}
            >
              <span className="sm:hidden">📈</span>
              <span className="hidden sm:inline-block">📈 daily positivity rate</span>
              {' '}
              {sortArrow(sortPositivity)}
            </div>
          </div>

          {(showCampus || showSymtomatic) && (
            <div className="flex bg-green-900 text-white font-bold text-center pb-2">
              <span className={columnClass}>&nbsp;</span>
              <div className={`flex text-center ${casesColumnClass} space-x-2`}>
                <div className={casesDataClass}>
                  <span className="sm:hidden">🦠</span>
                  <span className="hidden sm:inline-block">🦠 total</span>
                </div>

                {showSymtomatic && (
                <>
                  <div className={casesDataClass}>
                    <span className="md:hidden">🤒</span>
                    <span className="hidden md:inline-block overflow-clip">🤒&nbsp;symptomatic</span>
                  </div>
                  <div className={casesDataClass}>
                    <span className="md:hidden">😷</span>
                    <span className="hidden md:inline-block">😷&nbsp;asymptomatic</span>
                  </div>
                </>
                )}

                {showCampus && (
                <>
                  <div className={casesDataClass}>
                    <span className="md:hidden">🏫</span>
                    <span className="hidden md:inline-block">🏫 on&nbsp;campus</span>
                  </div>
                  <div className={casesDataClass}>
                    <span className="md:hidden">🏠</span>
                    <span className="hidden md:inline-block">🏠 off&nbsp;campus</span>
                  </div>
                </>
                )}

              </div>
            </div>
          )}

          <div className="">
            {sortedData.map((d) => {
              const [day, data] = d;
              return (
                <div key={day} className="flex hover:bg-yellow-900 even:bg-neutral-800 text-center px-2">
                  <span className={`${columnClass} whitespace-nowrap`}>{day}</span>
                  <span className={`flex ${casesColumnClass}`}>
                    <div className={casesDataClass}>{data.positiveTests}</div>
                    {showCampus && (
                    <>
                      <div className={casesDataClass}>{data.onCampusCases}</div>
                      <div className={casesDataClass}>{data.offCampusCases}</div>
                    </>
                    )}
                    {showSymtomatic && (
                    <>
                      <div className={casesDataClass}>{data.symptCases}</div>
                      <div className={casesDataClass}>{data.asymptCases}</div>
                    </>
                    )}
                  </span>
                  <span className={columnClass}>{data.performedTests}</span>
                  <span className={columnClass}>{data.dailyPositivitity.toFixed(4)}</span>
                </div>
              );
            })}
          </div>
        </div>
      </main>
    </div>
  );
};

export const getStaticProps: GetStaticProps = async () => {
  const example = await import('./api/stats-history.json');
  const data = example.default;
  const dailyData = mapToDaily(data);

  return { props: { lastUpdated: data.updateDateTime, days: dailyData } };
};

export default Daily;
